@model ULDeneme.ViewModel.VocabularyViewModels.VocabularyViewModel

<h1>@ViewData["Title"]</h1>


<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.UnKVoc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.KVoc)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.VocabularyList)
        {
            <tr>
                <td cl>
                    <button type="button" onclick="textToSpeech('@item.UnKVoc', '@ViewBag.UnknownLangShort')" style="border: none; background: transparent; outline: none;"><i class='fas fa-volume-down' style='font-size:16px;color:cornflowerblue'></i></button>
                    @Html.DisplayFor(modelItem => item.UnKVoc)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.KVoc)
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    async function textToSpeech(text, language) {

        if (text.length > 0) {
            const response = await fetch("/api/Speech/synthesize", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ text: text, language: language })
            });

            if (response.ok) {
                const audioData = await response.arrayBuffer();
                const audioBlob = new Blob([audioData], { type: "audio/mp3" });
                const audioUrl = URL.createObjectURL(audioBlob);
                const audio = new Audio(audioUrl);
                audio.play();
            } else {
                console.error("Speech synthesis failed:", await response.text());
            }
        }
    }
</script>

