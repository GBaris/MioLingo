@model List<ULDeneme.ViewModel.QuizTestViewModels.TestResult>

@{
    ViewData["Title"] = $"{ViewBag.SozlukAdi} - Test Your Vocabulary Knowledge";
}

<link href="~/css/QuisStyle.css" rel="stylesheet" />

<div class="container">
    <h1>@ViewBag.SozlukAdi</h1>
    <h3 class="mb-4">Test Your Vocabulary Knowledge</h3>

    @if (Model.Count == 0)
    {
        <p>There are no words to learn in this vocabulary!</p>
    }
    else
    {
        <form method="post">
            @for (int i = 0; i < Model.Count; i++)
            {
                var testResult = Model[i];
                var isFirstCard = i == 0;
                var isLastCard = i == Model.Count - 1;

                <div class="quiz-card" id="quiz-card-@i" @if (!isFirstCard) { <text> style="display:none;" </text> }>
                    <h2>
                        @testResult.Question.Word
                        <button type="button" onclick="textToSpeech('@testResult.Question.Word', '@ViewBag.UnknownLangShort')" style="border: none; background: transparent; outline: none;">
                            <i class='fas fa-volume-down' style='font-size: 24px; color: cornflowerblue'></i>
                        </button>
                    </h2>
                    <input type="hidden" name="testResultList[@i].Question.Word" value="@testResult.Question.Word" />
                    <input type="hidden" name="testResultList[@i].CorrectAnswer" value="@testResult.CorrectAnswer" />
                    <input type="hidden" name="testResultList[@i].Question.Options" value="@string.Join(',', testResult.Question.Options)" />
                    <input type="hidden" name="sozlukID" value="@ViewBag.SozlukID" />

                    <ul>
                        @foreach (var option in testResult.Question.Options)
                        {
                            <li>
                                <label>
                                    <input type="radio" name="testResultList[@i].UserAnswer" value="@option" checked="@(option == testResult.Question.SelectedAnswer)">
                                    @option
                                </label>
                            </li>
                        }
                    </ul>

                    <div class="actions">
                        @if (!isFirstCard)
                        {
                            <button class="back" type="button" onclick="showCard(@i - 1)">Back</button>
                        }

                        @if (isLastCard)
                        {
                            <button class="next" type="submit">Complete Test</button>
                        }
                        else
                        {
                            <button class="next" type="button" onclick="showCard(@i + 1)">Next</button>
                        }
                    </div>
                </div>
            }
        </form>
    }
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    var cards = $('.quiz-card');
    function showCard(index) {
        cards.hide();
        $(cards[index]).show();
    }
    showCard(0);

    $('.next').on('click', function () {
        const index = $(this).closest('.quiz-card').index();
        showCard(index + 1);
    });

    $('.back').on('click', function () {
        const index = $(this).closest('.quiz-card').index();
        showCard(index - 1);
    });

    document.addEventListener('keydown', function (event) {
        const code = event.code || event.key;
        if (code === 'Space') {
            // Find the next button and trigger its click event
            const nextButton = document.querySelector('.quiz-card:not([style*="none"]) .next');
            if (nextButton) {
                nextButton.click();
            }
        } else if (code === 'Backspace') {
            // Find the back button and trigger its click event
            const backButton = document.querySelector('.quiz-card:not([style*="none"]) .back');
            if (backButton) {
                backButton.click();
            }
        }
    });
    async function textToSpeech(text, language) {

        if (text.length > 0) {
            const response = await fetch("/api/Speech/synthesize", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ text: text, language: language })
            });

            if (response.ok) {
                const audioData = await response.arrayBuffer();
                const audioBlob = new Blob([audioData], { type: "audio/mp3" });
                const audioUrl = URL.createObjectURL(audioBlob);
                const audio = new Audio(audioUrl);
                audio.play();
            } else {
                console.error("Speech synthesis failed:", await response.text());
            }
        }
    }
</script>




